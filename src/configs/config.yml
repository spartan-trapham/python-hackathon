app:
  environment: 'development'
  title: 'development'
  description: 'development'
  host: '127.0.0.1' # uses for web server only
  port: 8080 # uses for web server only
  workers: ${WORKERS:1}

database:
  name: ${DB_NAME:python}
  username: ${DB_USERNAME:postgres}
  password: ${DB_PASSWORD:postgres}
  host: ${DB_HOST:localhost}
  port: ${DB_PORT:54321}

aws:
  accessKeyId: ${AWS_KEY_ID:'temp'}
  secretAccessKey: ${AWS_SECRET_KEY:'temp'}
  region: ${AWS_REGION:us-east-1}

sqs:
  generalQueueUrl: ${GENERAL_SQS_QUEUE_URL:`http://localhost:4566/000000000000/general`}
  celeryQueueUrl: ${CELERY_SQS_QUEUE_URL:`http://localhost:4566/000000000000/celery_task_queue`}

s3:
  url: ${S3_URL:`http://localhost:4566`}
  publicBucketName: ${PUBLIC_S3_BUCKET:public}
  privateBucketName: ${PRIVATE_S3_BUCKET:private}

redis:
  hosts: ${REDIS_HOSTS:}
  user: ${REDIS_USER:}
  password: ${REDIS_PASSWORD:}
  ssl: ${REDIS_SSL:false}
  timeout: ${REDIS_TIMEOUT:1000}
  port: ${REDIS_PORT:6379}

celery:
  critical:
    broker_url: ${CELERY_BROKER_URL:redis://localhost:6379/0}
    result_backend: ${CELERY_RESULT_BACKEND:redis://localhost:6379/0}
  scheduler:
    broker_url: ${CELERY_BROKER_URL:redis://localhost:6379/0}
    result_backend: ${CELERY_RESULT_BACKEND:redis://localhost:6379/0}

  result_expires: 0
  max_retry: 3
  schedulers:
    crontab:
      daily_service:
        enabled: true
        task: worker.tasks.example.hello
        minute: 0
        hour: 0
    interval:
      interval_service:
        enabled: true
        task: worker.tasks.example.hello
        seconds: 900
